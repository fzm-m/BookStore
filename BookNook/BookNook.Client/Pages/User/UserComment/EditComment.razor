@page "/userComment/editComment/{itemId:int}"
@using BookNook.Client.Layout
@layout UserLayout
@rendermode InteractiveWebAssembly
@using BookNook.Client.Models;
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JsRuntime


<style>
    .edit-product-container {
    max-width: 400px;
    margin: 50px auto;
    padding: 30px;
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .edit-product-container h3 {
    text-align: center;
    color: #333;
    font-size: 24px;
    margin-bottom: 20px;
    }

    .loading-message {
    color: #999;
    font-size: 16px;
    text-align: center;
    }

    .form-group {
    margin-bottom: 20px;
    }

    .form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 600;
    color: #333;
    }

    .form-group input {
    width: 100%;
    padding: 12px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 16px;
    transition: border-color 0.3s ease;
    }

    .form-group input:focus {
    border-color: #007BFF;
    outline: none;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
    }

    button {
    padding: 12px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s ease;
    margin-right: 10px;
    }

    button[type="submit"] {
    background-color: #007BFF;
    color: #fff;
    }

    button[type="submit"]:hover {
    background-color: #0056b3;
    }

    button:not([type="submit"]) {
    background-color: #6c757d;
    color: #fff;
    }

    button:not([type="submit"]):hover {
    background-color: #5a6268;
    }

    .error-message {
    margin-top: 20px;
    padding: 12px;
    background-color: #f8d7da;
    border: 1px solid #f5c6cb;
    border-radius: 5px;
    color: #721c24;
    text-align: center;
    }
</style>

<div class="edit-product-container">
    <h3>Edit </h3>
    <EditForm Model="@review" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="Rating">Rating</label>
            <InputNumber id="Rating" @bind-Value="review.Rating" class="form-control" />
            <ValidationMessage For="@(() => review.Rating)" />
        </div>

        <div class="form-group">
            <label for="Comment">Comment</label>
            <InputText id="Comment" @bind-Value="review.Comment" class="form-control" />
            <ValidationMessage For="@(() => review.Comment)" />
        </div>


        <button type="submit">Save</button>
        <button @onclick="CancelEdit">Cancel</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="error-message">
            @ErrorMessage
        </div>
    }


</div>

@code {
    [Parameter]
    public int itemId { get; set; }
    public string orderId;
    private string? ErrorMessage;

    private Review review=new Review();

     protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        orderId = query["orderId"];

        orderId = System.Net.WebUtility.UrlDecode(orderId);
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            review.OrderId = orderId;
            review.ItemId = itemId;
            review.UserId = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "userId");
            var response = await Http.PostAsJsonAsync($"api/Comment/Create", review);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/userComment/index");
            }
           
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private void CancelEdit()
    {
        Navigation.NavigateTo("/userComment/index");
    }
}