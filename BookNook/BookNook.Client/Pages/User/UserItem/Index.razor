@page "/userItem/index"
@using BookNook.Client.Layout
@layout UserLayout
@rendermode InteractiveWebAssembly
@using BookNook.Client.Models;
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JsRuntime

<style>
    .search-container {
        display: flex; /* Align items horizontally */
        justify-content: center; /* Center the whole container */
        gap: 15px; /* Add spacing between elements */
        margin: 20px auto; /* Center the search bar in the middle horizontally */
        flex-wrap: wrap; /* Allow wrapping for smaller screens */
    }

    .search-input, .search-select {
        width: 250px; /* Set uniform width for inputs and dropdowns */
    }

        .search-select#sortByReleaseDate {
            width: 280px; /* Slightly increase the width for the dropdown to fit the text */
        }

    .search-button {
        height: 40px;
        background-color: #007BFF;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .search-button:hover {
            background-color: #0056b3;
        }

    .form-group {
        margin-bottom: 0;
    }

    .search-input {
        width: 250px;
    }

    .search-select {
        width: 200px;
    }

    .search-button {
        height: 38px;
        background-color: #007BFF;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }


    .product-list {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
        padding: 20px;
        width: 80%;
        margin: 0 auto;
    }

    .product-card {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        transition: transform 0.3s ease;
    }

        .product-card:hover {
            transform: translateY(-5px);
        }

    .product-image {
        width: 100%; /* Ensure image takes full width of the card */
        height: 200px; /* Fixed height for uniformity */
        object-fit: contain; /* Ensures the entire image is visible */
        display: block; /* Remove extra space below image */
        background-color: #f8f8f8; /* Light gray background to fill empty spaces */
    }


    .product-info {
        padding: 20px;
    }

    .product-name {
        font-size: 20px;
        font-weight: 600;
        margin-bottom: 10px;
    }

    .product-description {
        font-size: 14px;
        color: #666;
        margin-bottom: 10px;
    }

    .product-price {
        font-size: 18px;
        font-weight: 600;
        color: #e74c3c;
    }

    /* 原价样式 */
    .original-price {
        text-decoration: line-through;
        color: #999;
        margin-right: 10px;
    }

    /* 产品类型样式 */
    .product-type {
        font-size: 14px;
        color: #666;
        margin-bottom: 5px;
    }
</style>

<div class="search-container">
    <!-- Search by Item Name -->
    <InputText type="text" @bind-Value="searchItemName" class="form-control search-input" placeholder="Search by Item Name" />

    <!-- Search by Author -->
    <InputText type="text" @bind-Value="searchAuthorName" class="form-control search-input" placeholder="Search by Author" />

    <!-- Filter by Item Type -->
    <InputSelect id="searchItemTypeId" @bind-Value="searchItemTypeId" class="form-control search-select">
        <option value="0">-- Select Item Type --</option>
        @foreach (var itemType in itemTypeList)
        {
            <option value="@itemType.Id">@itemType.Name</option>
        }
    </InputSelect>

    <!-- Sort by Release Date -->
    <InputSelect id="sortByReleaseDate" @bind-Value="sortByReleaseDate" class="form-control search-select">
        <option value="none">-- Sort by Release Date --</option>
        <option value="asc">Ascending</option>
        <option value="desc">Descending</option>
    </InputSelect>

    <!-- Search Button -->
    <button class="btn btn-success search-button" @onclick="SearchItems">Search</button>
</div>


<div class="product-list">
    @foreach (var product in products)
    {
        <div class="product-card" @onclick="@(() => NavigateToProductDetail(product.Id))">
            <img class="product-image" src="/images/@product.ImagePath" alt="@product.Name" />
            <div class="product-info">
                <h3 class="product-name">@product.Name</h3>
                <p class="product-type">Type: @product.ItemTypeName</p>
                <p class="product-type">Author: @product.Author</p> <!-- Display the author -->
                <!-- Truncated description -->
                <p class="product-description">
                    @if (!string.IsNullOrEmpty(product.Description) && product.Description.Length > 100)
                    {
                        @($"{product.Description.Substring(0, 100)}...") <!-- Display first 100 characters -->
                    }
                    else
                    {
                        @product.Description
                    }
                </p>

                @if (@product.PromotionId > 0 && @product.DiscountedPrice > 0)
                {
                    <span class="original-price">$@product.Price</span>
                    <span class="product-price">$@product.DiscountedPrice</span>
                }
                else
                {
                    <span class="product-price">$@product.Price</span>
                }

            </div>
        </div>
    }
</div>




@code {
    private List<ItemType> itemTypeList = new List<ItemType>();
    private string searchItemName = "";
    private int searchItemTypeId = 0;
    private string searchAuthorName = ""; 
    private string? sortByReleaseDate = "none"; 



    private List<Item> products = new List<Item>();

    protected override async Task OnInitializedAsync()
    {
        itemTypeList = await Http.GetFromJsonAsync<List<ItemType>>($"api/ItemType/getItemTypeList");
        await LoadProducts();
      
    }
    private async Task SearchItems()
    {
        await LoadProducts();
    }
    private async Task LoadProducts()
    {
        var query = $"api/Item?searchItemTypeId={searchItemTypeId}" +
                    $"&searchItemName={searchItemName}" +
                    $"&searchAuthorName={searchAuthorName}" +
                    $"&sortByReleaseDate={sortByReleaseDate}";

        products = await Http.GetFromJsonAsync<List<Item>>(query);

        // Debugging: Check if promotional data is correctly fetched
        foreach (var item in products)
        {
            Console.WriteLine($"Item: {item.Name}, PromotionId: {item.PromotionId}, DiscountedPrice: {item.DiscountedPrice}");
        }
    }

    private void NavigateToProductDetail(int productId)
    {
        Navigation.NavigateTo($"/userItem/itemDetail/{productId}?type=item");
    }
}
