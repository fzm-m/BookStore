@page "/item/editItem/{ItemId:int}"
@using BookNook.Client.Layout
@layout AdminLayout
@rendermode InteractiveWebAssembly
@using BookNook.Client.Models;
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JsRuntime

<style>
    /* Container styling */
    .edit-item-container {
        max-width: 800px; /* Increased width */
        margin: 30px auto; /* Adjust margin for balance */
        padding: 30px;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }


    /* Form group styling */
    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }

        .form-group input {
            width: 100%;
            padding: 12px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }

            .form-group input:focus {
                border-color: #007BFF;
                outline: none;
                box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
            }

    /* Button styling */
    button {
        padding: 12px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s ease;
        margin-right: 10px;
    }

        button[type="submit"] {
            background-color: #007BFF;
            color: #fff;
        }

            button[type="submit"]:hover {
                background-color: #0056b3;
            }

        button:not([type="submit"]) {
            background-color: #6c757d;
            color: #fff;
        }

            button:not([type="submit"]):hover {
                background-color: #5a6268;
            }

    /* Error message styling */
    .error-message {
        margin-top: 20px;
        padding: 12px;
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        color: #721c24;
        text-align: center;
    }
</style>

<div class="edit-item-container">
    <EditForm Model="@item" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <!-- Name Field -->
        <div class="form-group">
            <label for="Name">Name</label>
            <InputText id="Name" @bind-Value="item.Name" class="form-control" />
            <ValidationMessage For="@(() => item.Name)" />
        </div>

        <!-- Author Field (New) -->
        <div class="form-group">
            <label for="Author">Author</label>
            <InputText id="Author" @bind-Value="item.Author" class="form-control" />
            <ValidationMessage For="@(() => item.Author)" />
        </div>

        <!-- Item Type Dropdown -->
        <div class="form-group">
            <label for="ItemTypeId">Item Type</label>
            <InputSelect id="ItemTypeId" @bind-Value="item.ItemTypeId" class="form-control">
                <option value="">-- Select Item Type --</option>
                @foreach (var itemType in itemTypeList)
                {
                    <option value="@itemType.Id">@itemType.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => item.ItemTypeId)" />
        </div>

        <!-- Description Field -->
        <div class="form-group">
            <label for="Description">Description</label>
            <InputTextArea id="Description" @bind-Value="item.Description" class="form-control description-textarea" rows="4"></InputTextArea>
            <ValidationMessage For="@(() => item.Description)" />
        </div>

        <!-- Price Field -->
        <div class="form-group">
            <label for="Price">Price</label>
            <InputNumber id="Price" @bind-Value="item.Price" class="form-control" />
            <ValidationMessage For="@(() => item.Price)" />
        </div>

        <!-- Stock Field -->
        <div class="form-group">
            <label for="Stock">Stock</label>
            <InputNumber id="Stock" @bind-Value="item.Stock" class="form-control" />
            <ValidationMessage For="@(() => item.Stock)" />
        </div>

        <!-- Release Date Field (New) -->
        <div class="form-group">
            <label for="ReleaseDate">Release Date</label>
            <InputDate id="ReleaseDate" @bind-Value="item.ReleaseDate" class="form-control" />
            <ValidationMessage For="@(() => item.ReleaseDate)" />
        </div>

        <button type="submit">Save</button>
        <button @onclick="CancelEdit">Cancel</button>
    </EditForm>

    <!-- Error message display -->
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="error-message">
            @ErrorMessage
        </div>
    }
</div>

@code {
    [Parameter]
    public int ItemId { get; set; } // Gets Item ID from URL

    private string? ErrorMessage;
    private Item item = new Item()
        {
            ReleaseDate = DateTime.Today // ✅ Default to today's date
        };

    private List<ItemType> itemTypeList = new List<ItemType>();

    // Load item details for editing
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch item details from API
            item = await Http.GetFromJsonAsync<Item>($"api/Item/getItemById?id={ItemId}");

            // If no release date exists, set it to today
            if (item.ReleaseDate == default)
            {
                item.ReleaseDate = DateTime.Today;
            }

            // Fetch available item types
            itemTypeList = await Http.GetFromJsonAsync<List<ItemType>>("api/ItemType/getItemTypeList");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to load item: {ex.Message}";
        }
    }

    // Handle form submission for updating the item
    private async Task HandleValidSubmit()
    {
        try
        {
            if (item.ItemTypeId == 0)
            {
                ErrorMessage = "Please select an item type.";
                return;
            }

            var response = await Http.PutAsJsonAsync($"api/Item/updateItem/{ItemId}", item);


            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/item/index");
            }
            else
            {
                ErrorMessage = "Failed to update item.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
    }

    // Cancel editing and navigate back
    private void CancelEdit()
    {
        Navigation.NavigateTo("/item/index");
    }
}
