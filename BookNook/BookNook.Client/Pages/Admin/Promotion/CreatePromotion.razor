@page "/promotion/createPromotion"
@using BookNook.Client.Layout
@layout AdminLayout
@rendermode InteractiveWebAssembly
@using BookNook.Client.Models;
@inject NavigationManager Navigation
@inject HttpClient Http

<style>
    /* 整体容器样式 */
    .edit-item-container {
        max-width: 400px;
        margin: 50px auto;
        padding: 30px;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* 表单组样式 */
    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }

        .form-group input {
            width: 100%;
            padding: 12px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }

            .form-group input:focus {
                border-color: #007BFF;
                outline: none;
                box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
            }

    /* 按钮样式 */
    button {
        padding: 12px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s ease;
        margin-right: 10px;
    }

        button[type="submit"] {
            background-color: #007BFF;
            color: #fff;
        }

            button[type="submit"]:hover {
                background-color: #0056b3;
            }

        button:not([type="submit"]) {
            background-color: #6c757d;
            color: #fff;
        }

            button:not([type="submit"]):hover {
                background-color: #5a6268;
            }

    /* 错误消息样式 */
    .error-message {
        margin-top: 20px;
        padding: 12px;
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        color: #721c24;
        text-align: center;
    }
</style>

<div class="edit-item-container">
    <EditForm Model="@bean" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="PromoCode">PromoCode</label>
            <InputText id="PromoCode" @bind-Value="bean.PromoCode" class="form-control" />
            <ValidationMessage For="@(() => bean.PromoCode)" />
        </div>
          <div class="form-group">
            <label for="Description">Description</label>
            <InputText id="Description" @bind-Value="bean.Description" class="form-control" />
            <ValidationMessage For="@(() => bean.Description)" />
        </div>
        <div class="form-group">
            <label for="DiscountPercentage">DiscountPercentage</label>
            <InputNumber id="DiscountPercentage" @bind-Value="bean.DiscountPercentage" class="form-control" />
            <ValidationMessage For="@(() => bean.DiscountPercentage)" />
        </div>
        <button type="submit">Save</button>
        <button @onclick="CancelCreate">Cancel</button>
    </EditForm>


    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="error-message">
            @ErrorMessage
        </div>
    }

</div>
@code {
    private string? ErrorMessage;
    private Promotion bean = new Promotion();

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync($"api/Promotion", bean);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/promotion/index");
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private void CancelCreate()
    {
        Navigation.NavigateTo("/promotion/index");
    }
}
