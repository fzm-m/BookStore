@page "/"
@rendermode InteractiveWebAssembly
@using BookNook.Client.Models;
@using System.ComponentModel.DataAnnotations
@using BookNook.Client.services;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject UserStateService UserState
@inject IJSRuntime JsRuntime

<style>
    .login-container {
    max-width: 400px;
    margin: 10vh auto;
    padding: 30px;
    background-color: #ffffff;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .login-container h3 {
    text-align: center;
    color: #333;
    font-size: 24px;
    margin-bottom: 20px;
    }

    .form-group {
    margin-bottom: 20px;
    }

    .form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: 600;
    color: #555;
    }

    .form-group input {
    width: 100%;
    padding: 12px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 16px;
    transition: border-color 0.3s ease;
    }

    .form-group input:focus {
    border-color: #007BFF;
    outline: none;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
    }

    .btn-primary {
    width: 100%;
    padding: 12px;
    background-color: #007BFF;
    border: none;
    border-radius: 5px;
    color: #fff;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    }

    .btn-primary:hover {
    background-color: #0056b3;
    }

    .alert-danger {
    padding: 12px;
    background-color: #f8d7da;
    border: 1px solid #f5c6cb;
    border-radius: 5px;
    color: #721c24;
    text-align: center;
    }

    .login-container p {
    text-align: center;
    margin-top: 20px;
    }

    .login-container p a {
    color: #007BFF;
    text-decoration: none;
    transition: color 0.3s ease;
    }

    .login-container p a:hover {
    color: #0056b3;
    text-decoration: underline;
    }
</style>

<div class="login-container">
    <h3>Login</h3>

    <EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit" FormName="uniqueFormName">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="UserName">UserName</label>
            <InputText id="UserName" @bind-Value="loginModel.UserName" class="form-control" />
            <ValidationMessage For="@(() => loginModel.UserName)" />
        </div>

        <div class="form-group">
            <label for="Password">Password</label>
            <InputText id="Password" @bind-Value="loginModel.Password" class="form-control" type="password" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>

        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>


    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger mt-3">
            @ErrorMessage
        </div>
    }


    <p>
        <a href="/Account/register">Register</a>
    </p>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string? ErrorMessage;

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/Account/login", loginModel);
            if (response.IsSuccessStatusCode)

            {
                LoginResult result = await response.Content.ReadFromJsonAsync<LoginResult>();
                string token = result.Token;
                string userId = result.userId;
                string userName = result.userName;
                string role = result.role;
                
                await JsRuntime.InvokeVoidAsync("localStorage.removeItem", "token");
                await JsRuntime.InvokeVoidAsync("localStorage.removeItem", "userId");
                await JsRuntime.InvokeVoidAsync("localStorage.removeItem", "userName");
                await JsRuntime.InvokeVoidAsync("localStorage.removeItem", "role");

                await JsRuntime.InvokeVoidAsync("localStorage.setItem", "token", token);
                await JsRuntime.InvokeVoidAsync("localStorage.setItem", "userId", userId);
                await JsRuntime.InvokeVoidAsync("localStorage.setItem", "userName", userName);
                await JsRuntime.InvokeVoidAsync("localStorage.setItem", "role", role);

                
                if (role == "Administrator")
                {
                    Navigation.NavigateTo("/type/index");
                }
                else 
                {
                    Navigation.NavigateTo("/userHome/index");
                }
            }
            else
            {
                ErrorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private class LoginCheckResponse
    {
        public bool IsAuthenticated { get; set; }
        public string Username { get; set; }
        public bool IsAdmin { get; set; }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "UserName is required.")]
        public string? UserName { get; set; }
        [Required(ErrorMessage = "Password is required.")]
        public string? Password { get; set; }
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public string? Email { get; set; }
    }

    private class LoginResult
    {
        public string Token { get; set; }
        public string userId { get; set; }
        public string userName { get; set; }
        public string role { get; set; }
    }
}
